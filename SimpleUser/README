SimpleApp is a simple application to show various conventions for using JEE technologies and patterns.

CONFIGURATION:  The application has been tested and run on Tomcat 7.  So you'll need that.  The database
is setup as a MySQL database using InnoDB:
  - You'll need a schema called "simpleapp" 
  - A user called "simpleapp", password, "simple314"
  - You'll need to run the database DDL script using the file "WebContent/database/createstuff.sql"
  - You'll either need to add a hosts entry for "advisor.local" or point the app at your database in 
  	two places.  
  	- If you want to use Tomcat/JNDI JDBC setup, you'll only need to change the "WebContent/META-INF/context.xml"
  	file and update the "url" property to point to the proper host.
  	- If you want hibernate to NOT use Tomcat's JNDI facility, you'll need to change 
  		"WebContent/WEB-INF/classeshibernate.cfg.xml".  
  	Currently it's set to use Tomcat's JNDI source so
  	really to make the app work, you only need to change it in one place
  

You can change these if you want.  The files that need changing (depending
on how you want to setup JDBC and Hibernate are 

1) First example is a simple JDBC application that stores, changes, retrieves data in a single table USER.
All actions are based on the base objects in the "classes/object" package.  There are two primary classes, 
User and Role following conventional Javabean standards with the addition of an constructors added simply 
for me to mess around.
	- I use simple DAO pattern for this found in clases "UserDAO"(interface) and "UserDAOImplSimple"
		(implementation) in the "simpleDAO" package.  
	- There's also a simple Factory pattern show in "classes/commonDAO"
	- Connections to the database are managed through the "DBConnection" class in the "simpleJDBC" package.
	- Once you've set everything up and are ready to run it, go to <yourhost:port>/SimpleUser
	- There are a set of links to the sample apps, which run a set of cactus servlet tests to make sure it all works
	  and displays the status.  You can see the test implementations (which shows use of various patterns and
	  implementation) in "classes/test/<classes>".  For example they'll show calls to the factory and creation
	  of DAO objects.
	  
	  
	  
OTHER
  - I use Logback for logging.  right now it's a very simple setup to send everything to the console.
    It's also set at debug.  You can change the log level if you want.
  - I know my tests aren't traditional setup/teardown style.  They're really just servlets using Cactus/JUnit
  	to make sure stuff works and show the concepts of DAO, Factory, Hibernate, stuff like that.
  	